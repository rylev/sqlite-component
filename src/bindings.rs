// Generated by `wit-bindgen` 0.24.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod component {
        #[allow(dead_code)]
        pub mod sqlite_component {
            #[allow(dead_code, clippy::all)]
            pub mod sqlite {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                /// A handle to an open sqlite instance

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Connection {
                    handle: _rt::Resource<Connection>,
                }

                type _ConnectionRep<T> = Option<T>;

                impl Connection {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Connection`.
                    pub fn new<T: GuestConnection>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ConnectionRep<T> = Some(val);
                        let ptr: *mut _ConnectionRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestConnection>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestConnection>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestConnection>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestConnection` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _ConnectionRep<T>);
                    }

                    fn as_ptr<T: GuestConnection>(&self) -> *mut _ConnectionRep<T> {
                        Connection::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`Connection`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ConnectionBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Connection>,
                }

                impl<'a> ConnectionBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestConnection>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _ConnectionRep<T> {
                        Connection::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for Connection {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:sqlite-component/sqlite"
                            )]
                            extern "C" {
                                #[link_name = "[resource-drop]connection"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                /// The set of errors which may be raised by functions in this interface
                #[derive(Clone)]
                pub enum Error {
                    /// The host does not recognize the database name requested.
                    NoSuchDatabase,
                    /// The requesting component does not have access to the specified database (which may or may not exist).
                    AccessDenied,
                    /// The provided connection is not valid
                    InvalidConnection,
                    /// The database has reached its capacity
                    DatabaseFull,
                    /// Some implementation-specific error has occurred (e.g. I/O)
                    Io(_rt::String),
                }
                impl ::core::fmt::Debug for Error {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            Error::NoSuchDatabase => {
                                f.debug_tuple("Error::NoSuchDatabase").finish()
                            }
                            Error::AccessDenied => f.debug_tuple("Error::AccessDenied").finish(),
                            Error::InvalidConnection => {
                                f.debug_tuple("Error::InvalidConnection").finish()
                            }
                            Error::DatabaseFull => f.debug_tuple("Error::DatabaseFull").finish(),
                            Error::Io(e) => f.debug_tuple("Error::Io").field(e).finish(),
                        }
                    }
                }
                impl ::core::fmt::Display for Error {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }

                impl std::error::Error for Error {}
                /// A single column's result from a database query
                #[derive(Clone)]
                pub enum Value {
                    Integer(i64),
                    Real(f64),
                    Text(_rt::String),
                    Blob(_rt::Vec<u8>),
                    Null,
                }
                impl ::core::fmt::Debug for Value {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            Value::Integer(e) => f.debug_tuple("Value::Integer").field(e).finish(),
                            Value::Real(e) => f.debug_tuple("Value::Real").field(e).finish(),
                            Value::Text(e) => f.debug_tuple("Value::Text").field(e).finish(),
                            Value::Blob(e) => f.debug_tuple("Value::Blob").field(e).finish(),
                            Value::Null => f.debug_tuple("Value::Null").finish(),
                        }
                    }
                }
                /// A set of values for each of the columns in a query-result
                #[derive(Clone)]
                pub struct RowResult {
                    pub values: _rt::Vec<Value>,
                }
                impl ::core::fmt::Debug for RowResult {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("RowResult")
                            .field("values", &self.values)
                            .finish()
                    }
                }
                /// A result of a query
                #[derive(Clone)]
                pub struct QueryResult {
                    /// The names of the columns retrieved in the query
                    pub columns: _rt::Vec<_rt::String>,
                    /// the row results each containing the values for all the columns for a given row
                    pub rows: _rt::Vec<RowResult>,
                }
                impl ::core::fmt::Debug for QueryResult {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("QueryResult")
                            .field("columns", &self.columns)
                            .field("rows", &self.rows)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_static_connection_open_cabi<T: GuestConnection>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::open(_rt::string_lift(bytes0));
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr2.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Error::NoSuchDatabase => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                }
                                Error::AccessDenied => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                }
                                Error::InvalidConnection => {
                                    *ptr2.add(4).cast::<u8>() = (2i32) as u8;
                                }
                                Error::DatabaseFull => {
                                    *ptr2.add(4).cast::<u8>() = (3i32) as u8;
                                }
                                Error::Io(e) => {
                                    *ptr2.add(4).cast::<u8>() = (4i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr2.add(12).cast::<usize>() = len3;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_static_connection_open<T: GuestConnection>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => (),
                                1 => (),
                                2 => (),
                                3 => (),
                                _ => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_connection_execute_cabi<T: GuestConnection>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let base11 = arg3;
                    let len11 = arg4;
                    let mut result11 = _rt::Vec::with_capacity(len11);
                    for i in 0..len11 {
                        let base = base11.add(i * 16);
                        let e11 = {
                            let l1 = i32::from(*base.add(0).cast::<u8>());
                            let v10 = match l1 {
                                0 => {
                                    let e10 = {
                                        let l2 = *base.add(8).cast::<i64>();

                                        l2
                                    };
                                    Value::Integer(e10)
                                }
                                1 => {
                                    let e10 = {
                                        let l3 = *base.add(8).cast::<f64>();

                                        l3
                                    };
                                    Value::Real(e10)
                                }
                                2 => {
                                    let e10 = {
                                        let l4 = *base.add(8).cast::<*mut u8>();
                                        let l5 = *base.add(12).cast::<usize>();
                                        let len6 = l5;
                                        let bytes6 =
                                            _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                                        _rt::string_lift(bytes6)
                                    };
                                    Value::Text(e10)
                                }
                                3 => {
                                    let e10 = {
                                        let l7 = *base.add(8).cast::<*mut u8>();
                                        let l8 = *base.add(12).cast::<usize>();
                                        let len9 = l8;

                                        _rt::Vec::from_raw_parts(l7.cast(), len9, len9)
                                    };
                                    Value::Blob(e10)
                                }
                                n => {
                                    debug_assert_eq!(n, 4, "invalid enum discriminant");
                                    Value::Null
                                }
                            };

                            v10
                        };
                        result11.push(e11);
                    }
                    _rt::cabi_dealloc(base11, len11 * 16, 8);
                    let result12 = T::execute(
                        ConnectionBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                        result11,
                    );
                    let ptr13 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result12 {
                        Ok(e) => {
                            *ptr13.add(0).cast::<u8>() = (0i32) as u8;
                            let QueryResult {
                                columns: columns14,
                                rows: rows14,
                            } = e;
                            let vec16 = columns14;
                            let len16 = vec16.len();
                            let layout16 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec16.len() * 8, 4);
                            let result16 = if layout16.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout16);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec16.into_iter().enumerate() {
                                let base = result16.add(i * 8);
                                {
                                    let vec15 = (e.into_bytes()).into_boxed_slice();
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    ::core::mem::forget(vec15);
                                    *base.add(4).cast::<usize>() = len15;
                                    *base.add(0).cast::<*mut u8>() = ptr15.cast_mut();
                                }
                            }
                            *ptr13.add(8).cast::<usize>() = len16;
                            *ptr13.add(4).cast::<*mut u8>() = result16;
                            let vec21 = rows14;
                            let len21 = vec21.len();
                            let layout21 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec21.len() * 8, 4);
                            let result21 = if layout21.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout21).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout21);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec21.into_iter().enumerate() {
                                let base = result21.add(i * 8);
                                {
                                    let RowResult { values: values17 } = e;
                                    let vec20 = values17;
                                    let len20 = vec20.len();
                                    let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec20.len() * 16,
                                        8,
                                    );
                                    let result20 = if layout20.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout20);
                                        }
                                        ptr
                                    } else {
                                        {
                                            ::core::ptr::null_mut()
                                        }
                                    };
                                    for (i, e) in vec20.into_iter().enumerate() {
                                        let base = result20.add(i * 16);
                                        {
                                            match e {
                                                Value::Integer(e) => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                Value::Real(e) => {
                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                }
                                                Value::Text(e) => {
                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                    let vec18 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr18 = vec18.as_ptr().cast::<u8>();
                                                    let len18 = vec18.len();
                                                    ::core::mem::forget(vec18);
                                                    *base.add(12).cast::<usize>() = len18;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr18.cast_mut();
                                                }
                                                Value::Blob(e) => {
                                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                                    let vec19 = (e).into_boxed_slice();
                                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                                    let len19 = vec19.len();
                                                    ::core::mem::forget(vec19);
                                                    *base.add(12).cast::<usize>() = len19;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr19.cast_mut();
                                                }
                                                Value::Null => {
                                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                                }
                                            }
                                        }
                                    }
                                    *base.add(4).cast::<usize>() = len20;
                                    *base.add(0).cast::<*mut u8>() = result20;
                                }
                            }
                            *ptr13.add(16).cast::<usize>() = len21;
                            *ptr13.add(12).cast::<*mut u8>() = result21;
                        }
                        Err(e) => {
                            *ptr13.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Error::NoSuchDatabase => {
                                    *ptr13.add(4).cast::<u8>() = (0i32) as u8;
                                }
                                Error::AccessDenied => {
                                    *ptr13.add(4).cast::<u8>() = (1i32) as u8;
                                }
                                Error::InvalidConnection => {
                                    *ptr13.add(4).cast::<u8>() = (2i32) as u8;
                                }
                                Error::DatabaseFull => {
                                    *ptr13.add(4).cast::<u8>() = (3i32) as u8;
                                }
                                Error::Io(e) => {
                                    *ptr13.add(4).cast::<u8>() = (4i32) as u8;
                                    let vec22 = (e.into_bytes()).into_boxed_slice();
                                    let ptr22 = vec22.as_ptr().cast::<u8>();
                                    let len22 = vec22.len();
                                    ::core::mem::forget(vec22);
                                    *ptr13.add(12).cast::<usize>() = len22;
                                    *ptr13.add(8).cast::<*mut u8>() = ptr22.cast_mut();
                                }
                            }
                        }
                    };
                    ptr13
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_connection_execute<T: GuestConnection>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            let base5 = l3;
                            let len5 = l4;
                            for i in 0..len5 {
                                let base = base5.add(i * 8);
                                {
                                    let l1 = *base.add(0).cast::<*mut u8>();
                                    let l2 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l1, l2, 1);
                                }
                            }
                            _rt::cabi_dealloc(base5, len5 * 8, 4);
                            let l15 = *arg0.add(12).cast::<*mut u8>();
                            let l16 = *arg0.add(16).cast::<usize>();
                            let base17 = l15;
                            let len17 = l16;
                            for i in 0..len17 {
                                let base = base17.add(i * 8);
                                {
                                    let l12 = *base.add(0).cast::<*mut u8>();
                                    let l13 = *base.add(4).cast::<usize>();
                                    let base14 = l12;
                                    let len14 = l13;
                                    for i in 0..len14 {
                                        let base = base14.add(i * 16);
                                        {
                                            let l6 = i32::from(*base.add(0).cast::<u8>());
                                            match l6 {
                                                0 => (),
                                                1 => (),
                                                2 => {
                                                    let l7 = *base.add(8).cast::<*mut u8>();
                                                    let l8 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l7, l8, 1);
                                                }
                                                3 => {
                                                    let l9 = *base.add(8).cast::<*mut u8>();
                                                    let l10 = *base.add(12).cast::<usize>();
                                                    let base11 = l9;
                                                    let len11 = l10;
                                                    _rt::cabi_dealloc(base11, len11 * 1, 1);
                                                }
                                                _ => (),
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(base14, len14 * 16, 8);
                                }
                            }
                            _rt::cabi_dealloc(base17, len17 * 8, 4);
                        }
                        _ => {
                            let l18 = i32::from(*arg0.add(4).cast::<u8>());
                            match l18 {
                                0 => (),
                                1 => (),
                                2 => (),
                                3 => (),
                                _ => {
                                    let l19 = *arg0.add(8).cast::<*mut u8>();
                                    let l20 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l19, l20, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    type Connection: GuestConnection;
                }
                pub trait GuestConnection: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:sqlite-component/sqlite"
                            )]
                            extern "C" {
                                #[link_name = "[resource-new]connection"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:sqlite-component/sqlite"
                            )]
                            extern "C" {
                                #[link_name = "[resource-rep]connection"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    /// Open a connection to a named database instance.
                    ///
                    /// If `database` is "default", the default instance is opened.
                    ///
                    /// `error::no-such-database` will be raised if the `name` is not recognized.
                    fn open(database: _rt::String) -> Result<Connection, Error>;
                    /// Execute a statement returning back data if there is any
                    fn execute(
                        &self,
                        statement: _rt::String,
                        parameters: _rt::Vec<Value>,
                    ) -> Result<QueryResult, Error>;
                }
                #[doc(hidden)]

                macro_rules! __export_component_sqlite_component_sqlite_cabi{
      ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

        #[export_name = "component:sqlite-component/sqlite#[static]connection.open"]
        unsafe extern "C" fn export_static_connection_open(arg0: *mut u8,arg1: usize,) -> *mut u8 {
          $($path_to_types)*::_export_static_connection_open_cabi::<<$ty as $($path_to_types)*::Guest>::Connection>(arg0, arg1)
        }
        #[export_name = "cabi_post_component:sqlite-component/sqlite#[static]connection.open"]
        unsafe extern "C" fn _post_return_static_connection_open(arg0: *mut u8,) {
          $($path_to_types)*::__post_return_static_connection_open::<<$ty as $($path_to_types)*::Guest>::Connection>(arg0)
        }
        #[export_name = "component:sqlite-component/sqlite#[method]connection.execute"]
        unsafe extern "C" fn export_method_connection_execute(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: *mut u8,arg4: usize,) -> *mut u8 {
          $($path_to_types)*::_export_method_connection_execute_cabi::<<$ty as $($path_to_types)*::Guest>::Connection>(arg0, arg1, arg2, arg3, arg4)
        }
        #[export_name = "cabi_post_component:sqlite-component/sqlite#[method]connection.execute"]
        unsafe extern "C" fn _post_return_method_connection_execute(arg0: *mut u8,) {
          $($path_to_types)*::__post_return_method_connection_execute::<<$ty as $($path_to_types)*::Guest>::Connection>(arg0)
        }

        const _: () = {
          #[doc(hidden)]
          #[export_name = "component:sqlite-component/sqlite#[dtor]connection"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn dtor(rep: *mut u8) {
            $($path_to_types)*::Connection::dtor::<
            <$ty as $($path_to_types)*::Guest>::Connection
            >(rep)
          }
        };

      };);
    }
                #[doc(hidden)]
                pub(crate) use __export_component_sqlite_component_sqlite_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 20]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 20]);
            }
        }
    }
}
mod _rt {

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub use alloc_crate::alloc;

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }

    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }

    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }

    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_sqlite_world_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::component::sqlite_component::sqlite::__export_component_sqlite_component_sqlite_cabi!($ty with_types_in $($path_to_types_root)*::exports::component::sqlite_component::sqlite);
  )
}
#[doc(inline)]
pub(crate) use __export_sqlite_world_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.24.0:sqlite-world:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 586] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xc7\x03\x01A\x02\x01\
A\x02\x01B\x15\x04\0\x0aconnection\x03\x01\x01q\x05\x10no-such-database\0\0\x0da\
ccess-denied\0\0\x12invalid-connection\0\0\x0ddatabase-full\0\0\x02io\x01s\0\x04\
\0\x05error\x03\0\x01\x01p}\x01q\x05\x07integer\x01x\0\x04real\x01u\0\x04text\x01\
s\0\x04blob\x01\x03\0\x04null\0\0\x04\0\x05value\x03\0\x04\x01p\x05\x01r\x01\x06\
values\x06\x04\0\x0arow-result\x03\0\x07\x01ps\x01p\x08\x01r\x02\x07columns\x09\x04\
rows\x0a\x04\0\x0cquery-result\x03\0\x0b\x01i\0\x01j\x01\x0d\x01\x02\x01@\x01\x08\
databases\0\x0e\x04\0\x17[static]connection.open\x01\x0f\x01h\0\x01j\x01\x0c\x01\
\x02\x01@\x03\x04self\x10\x09statements\x0aparameters\x06\0\x11\x04\0\x1a[method\
]connection.execute\x01\x12\x04\x01!component:sqlite-component/sqlite\x05\0\x04\x01\
'component:sqlite-component/sqlite-world\x04\0\x0b\x12\x01\0\x0csqlite-world\x03\
\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.202.0\x10wit-\
bindgen-rust\x060.24.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
